spring:
  datasource:
    url: jdbc:mysql://${DB_HOST}:${DB_PORT}/${DB_NAME}?createDatabaseIfNotExist=true
    username: ${DB_USERNAME}
    password: ${DB_PASSWORD}

  jpa:
    hibernate:
      ddl-auto: update
      properties:
        hibernate:
          format_sql: true
          dialect: org.hibernate.dialect.MySQL5InnoDBDialect
    show-sql: false

  security:
    oauth2:
      client:
        registration:
          google:
            clientId: 848420635918-bromkqgfpisei7n39gc79of48ioefnp8.apps.googleusercontent.com
            clientSecret: ${GG_SECRET}
            redirectUri: "{baseUrl}/oauth2/callback/{registrationId}"
            scope:
              - email
              - profile
          facebook:
            clientId: 474416987446194
            clientSecret: ${FB_SECRET}
            redirectUri: "{baseUrl}/oauth2/callback/{registrationId}"
            scope:
              - email
              - public_profile
          github:
            clientId: 679bd58811fed64eb436
            clientSecret: ${GITHUB_SECRET}
            redirectUri: "{baseUrl}/oauth2/callback/{registrationId}"
            scope:
              - user:email
              - read:user
  #          provider:
  #            facebook:
  #              authorizationUri: https://www.facebook.com/v3.0/dialog/oauth
  #              tokenUri: https://graph.facebook.com/v3.0/oauth/access_token
  #              #userInfoUri: https://graph.facebook.com/v3.0/me?fields=id,first_name,middle_name,last_name,name,email,verified,is_verified,picture
  #              userInfoUri: https://graph.facebook.com/v3.0/me?fields=id,first_name,middle_name,last_name,name,email,verified,is_verified,picture.width(250).height(250)

#  mail:
#    host: smtp.gmail.com
#    port: 587
#    username: ${EMAIL}
#    password: ${EMAIL_PASSWORD}
#    properties:
#      mail:
#        smtp:
#          auth: true
#          starttls:
#            enable: true

  sql:
    init:
      mode: always
      data-locations:
        - classpath:1-insert-category-and-subcategory.sql
        - classpath:2-insert-100-users.sql
        - classpath:3-insert-100-users-images.sql
        - classpath:4-insert-art-and-digital-10-items.sql
        - classpath:4.1-insert-art-and-digital-30-desc.sql
        - classpath:4.2-insert-art-and-digital-50-images.sql
        - classpath:4.3-insert-art-and-digital-150-bids.sql
        - classpath:5-insert-car-and-boat-10-items.sql
        - classpath:5.1-insert-car-and-boat-30-desc.sql
        - classpath:5.2-insert-car-and-boat-50-images.sql
        - classpath:5.3-insert-car-and-boat-150-bids.sql
        - classpath:6-insert-watches-and-belts-10-items.sql
        - classpath:6.1-insert-watches-and-belts-20-desc.sql
        - classpath:6.2-insert-watches-and-belts-images-50-images.sql
        - classpath:6.3-insert-watches-and-belts-150-bids.sql
      continue-on-error: true

app:
  auth:
    tokenSecret: ${APP_AUTH_SECRET}
    tokenExpirationMsec: 864000000
  cors:
    allowedOriginPatterns: ${ALLOWED_ORIGIN_PATTERNS}
  oauth2:
    # After successfully authenticating with the OAuth2 Provider,
    # we'll be generating an auth token for the user and sending the token to the
    # redirectUri mentioned by the client in the /oauth2/authorize request.
    # We're not using cookies because they won't work well in mobile clients.
    authorizedRedirectUris:
      - ${AUTH_REDIRECT_URI}

jwt:
  secret: ${JWT_SECRET}
  expirationDateInMs: 60000
#spring.jpa.show-sql: true

server:
  http:
    port: ${HTTP_PORT}
  port: 443
  ssl:
    enable: false
#    key-store-type: PKCS12
    key-store: classpath:keystore/keystore.jks
    key-store-password: ${KEY_STORE_PASSWORD}

google:
  recaptcha:
    verification:
      endpoint: https://www.google.com/recaptcha/api/siteverify
    secret: 6LeaUQgeAAAAAEJC0VzwPYEt1w6HDArtjgXIMWex